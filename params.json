{"body":"Installation\r\n============\r\n\r\n1.  Clone the BuildDomino repository:\r\n\r\n        git clone git@github.com/tygern/BuildDomino.git\r\n\r\n2. *(Optional)* Install [buildr](http://buildr.apache.org/)\r\n\r\n3. *(Optional)* Build the jar package.\r\n\r\n        cd BuildDomino/\r\n        buildr package\r\n\r\n4. Run the BuildDomino jar in the target directory.\r\n\r\n        cd BuildDomino/target/\r\n        java -jar build-domino-x.y.z.jar\r\n        \r\n**Note:** Requires java JRE 7\r\n\r\nIntroduction\r\n============\r\n\r\nCoxeter Groups\r\n--------------\r\n\r\nThis program was developed to preform operations on elements of type D\r\n[Coxeter groups](http://en.wikipedia.org/wiki/Coxeter_group).  For\r\nmore information on Coxeter Groups see James E. Humphreys'\r\n[Reflection Groups and Coxeter Groups](http://books.google.com/books/about/Reflection_Groups_and_Coxeter_Groups.html?id=ODfjmOeNLMUC).\r\n\r\nDomino Tableaux\r\n---------------\r\n\r\nBuild Domino is able to construct domino tableaux from elements of\r\ntype D Coxeter groups. Devra Garfinkle developed an algorithm similar\r\nto the\r\n[Robinson--Schensted correspondence](http://en.wikipedia.org/wiki/Robinson%E2%80%93Schensted_correspondence)\r\nto associate a signed permutations to a pair of domino tableaux. This\r\npair of tableaux are difficult to compute by hand but are very\r\nuseful. Like the Robinson--Schensted correspondence, this pair can be\r\nused to calculate the Kazhdan--Lusztig cells of the Coxeter group.\r\nThe computation of these cells, as described in Garfinkle's papers,\r\n*On the classification of primitive ideals for complex classical Lie\r\nalgebras* [I](http://www.numdam.org/item?id=CM_1990__75_2_135_0),\r\n[II](http://www.numdam.org/item?id=CM_1992__81_3_307_0), and\r\n[III](http://www.numdam.org/item?id=CM_1993__88_2_187_0), involves\r\nmoving tableaux through sets called *cycles*.  I hope to add these\r\ncalculations to a future version of BuildDomino.\r\n\r\nHeaps\r\n-----\r\n\r\nA heap is a useful tool in visualizing reduced expressions of an\r\nelement of a Coxeter group.  To construct a heap, we imagine dropping\r\nwide blocks on the Coxeter graph corresponding to our group.  When we\r\ntry to place adjacent blocks there is not enough room, so they must\r\nstack on top of each other.  A heap of an element of a Coxeter group\r\nof type D is difficult to draw in two dimensions.  In the heaps\r\ncreated by BuildDomino, it appears as if blocks labeled with 1 and 2\r\nmay occupy the same space, when actually they must sit beside each\r\nother.\r\n\r\nSigned Permutations\r\n-------------------\r\n\r\nA\r\n[signed permutation](http://en.wikipedia.org/wiki/Hyperoctahedral_group)\r\nis a map from the set {-n, -(n-1), ... , -1, 1, ... , n-1, n} to\r\nitself such that x maps to y if and only if -x maps to -y. The set of\r\nsigned permutations can be represented as permutations of n coins\r\nwhere flipping is allowed.  As with regular permutations, each signed\r\npermutation can be written in *one line notation*.  A Coxeter group of\r\ntype B is isomorphic to the group of signed permutations, and a\r\nCoxeter group of type D is isomorphic to an index 2 subgroup.\r\n\r\nUse\r\n===\r\n\r\nInput\r\n-----\r\n\r\nYou may input an element either as a signed permutation or as a\r\nexpression in terms of generators.  In either case, you must enter\r\nyour element as a list of integers separated by commas.  For example,\r\nI would input the signed permutation that fixes 2 and 4, sends 1 to -3\r\nand 3 to -1 as \\[\\-3, 2, \\-1, 4\\]. I would enter the element\r\n\\(s1\\)\\(s2\\)\\(s3\\)\\(s4\\)\\(s3\\) as \\[1,2,3,4,3\\].  I use (s_3) as my\r\nbranch node for the type D\r\n[Coxeter diagram](http://en.wikipedia.org/wiki/Coxeter%E2%80%93Dynkin_diagram).\r\n\r\nOutput\r\n------\r\n\r\n### Elementary Calculations\r\n\r\nBuildDomino is able to compute the length, descent sets, and inverse\r\nof an element.  It can also tell whether a particular element is a\r\n*bad* element.  We define a bad element to be an element that has no\r\nreduced expressions beginning or ending in two noncommuting generators\r\nthat is not a product of commuting generators.\r\n\r\nThe user also has the option of viewing your original element or its\r\ninverse as a signed permutation or reduced expression.  This is\r\nespecially useful if you enter an element in terms of generators, or\r\nwhen attempting to find reduced expressions corresponding to signed\r\npermutations.\r\n\r\nEach of these computations is conducted using the signed permutation\r\ncorresponding to the element.\r\n\r\n### Domino Tableaux\r\n\r\nOnce the user enters a Coxeter group element, BuildDomino can output\r\nthe right and left domino tableau.  The user has two choices for the\r\nform of the output.  The tableau can be drawn in a graphical window or\r\ncan be written in [TikZ](http://sourceforge.net/projects/pgf/) code\r\nfor inclusion in [LaTeX](http://www.latex-project.org/) documents.\r\n\r\n### Heaps\r\n\r\nOnce the user enters a Coxeter group element, BuildDomino can output a\r\nheap corresponding to a reduced expression for the current element.  As\r\nabove, the user has two choices for the form of the output.  The heap\r\ncan be drawn in a graphical window or can be written in TikZ code.\r\n","name":"Build Domino","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Creates domino tableaux of elements of Coxeter groups of type D.","google":"UA-36714821-1"}